AWSTemplateFormatVersion: '2010-09-09'
Description: 'lambda: Serverless Agent for Buildkite, a @wolfeidau template'
Transform: AWS::Serverless-2016-10-31
Parameters:
    EnvironmentName:
      Type: String
      Default: "dev"
    EnvironmentNumber:
      Type: String
      Default: "1"
    AgentPoolSize:
      Type: Number
      Default: 5

Resources:

  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  BuildkiteProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: no_artifacts
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        # using my custom codebuild docker image with buildkite installed along with golang
        Image: wolfeidau/codebuild-docker-buildkite:17.09.0 
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables: 
        - Name: ENVIRONMENT_NAME
          Type: "PLAINTEXT"
          Value: !Sub "${EnvironmentName}"
        - Name: ENVIRONMENT_NUMBER
          Type: "PLAINTEXT"
          Value: !Sub "${EnvironmentNumber}"
        - Name: ARTIFACT_BUCKET_NAME
          Type: "PLAINTEXT"
          Value: !Ref ArtifactBucket
      Name: !Sub "BuildkiteProject-${EnvironmentName}-${EnvironmentNumber}"
      ServiceRole: !Ref BuildkiteCodeBuildRole
      Source:
        Type: S3
        Location: !Sub "arn:aws:s3:::${SourceBucket}/buildkite.zip"

  BuildkiteCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: BuildkiteSSMAccess
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 'ssm:DescribeParameters'
            Resource:
            - '*'
          - Effect: Allow
            Action: 
            - 'ssm:GetParameters'
            - 'ssm:GetParameter'
            Resource:
            - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentName}/${EnvironmentNumber}/*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/BuildkiteProject-${EnvironmentName}-${EnvironmentNumber}*"
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            Resource:
            - !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-*"
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            Resource:
            - !Sub "arn:aws:s3:::${SourceBucket}/buildkite.zip"
          - Effect: Allow
            Action:
            - 's3:ListAllMyBuckets'
            Resource:
            - '*'
          - Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetObjectAcl
            - s3:GetObjectVersion
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:PutObjectVersionAcl
            Resource:
            - !Sub "arn:aws:s3:::${ArtifactBucket}/*"
            - !Sub "arn:aws:s3:::${ArtifactBucket}"

  AgentFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies: 
        - 
          PolicyName: "BuildkiteSfnFunctionAccess"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - states:DescribeStateMachine
                - states:StartExecution
                - states:ListExecutions
                Resource:
                - !Sub '${StateMachineCodebuildJobMonitor}'
              - Effect: Allow
                Action: 
                - 'ssm:DescribeParameters'
                Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action: 
                - 'ssm:GetParameters'
                - 'ssm:GetParameter'
                - 'ssm:PutParameter'
                Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentName}/${EnvironmentNumber}/*"

  AgentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: agent-poll
      Timeout: 60
      MemorySize: 256
      Runtime: go1.x
      CodeUri: ./handler.zip
      Role: !Sub ${AgentFunctionRole.Arn}
      Environment:   
        Variables:
          ENVIRONMENT_NAME:
            Ref: EnvironmentName
          ENVIRONMENT_NUMBER:
            Ref: EnvironmentNumber
          AGENT_POOL_SIZE:
            Ref: AgentPoolSize
          SFN_CODEBUILD_JOB_MONITOR_ARN: !Sub '${StateMachineCodebuildJobMonitor}'
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)

  SfnFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies: 
        - 
          PolicyName: "BuildkiteSfnFunctionAccess"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action: 
                - 'ssm:GetParameters'
                - 'ssm:GetParameter'
                - 'ssm:DescribeParameters'
                Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentName}/${EnvironmentNumber}/*"
              - Effect: Allow
                Action: 
                - 'ssm:DescribeParameters'
                Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action: 
                - 'codebuild:BatchGetBuilds'
                - 'codebuild:StartBuild'
                - 'codebuild:StopBuild'
                Resource:
                - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/BuildkiteProject-${EnvironmentName}-${EnvironmentNumber}*"
              - Effect: Allow
                Action:
                - logs:GetLogEvents
                Resource:
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/BuildkiteProject-${EnvironmentName}-${EnvironmentNumber}*"
              - Effect: Allow
                Action:
                - logs:GetLogEvents
                Resource:
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/BuildkiteProject-${EnvironmentName}-${EnvironmentNumber}*"

  SubmitJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: step-handler
      Timeout: 30
      Runtime: go1.x
      MemorySize: 256
      CodeUri: ./handler.zip
      Role: !Sub ${SfnFunctionRole.Arn}
      Environment:
        Variables:
          STEP_HANDLER: "submit-job"
          ENVIRONMENT_NAME:
            Ref: EnvironmentName
          ENVIRONMENT_NUMBER:
            Ref: EnvironmentNumber

  CheckJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: step-handler
      Timeout: 30
      Runtime: go1.x
      MemorySize: 256
      CodeUri: ./handler.zip
      Role: !Sub ${SfnFunctionRole.Arn}
      Environment:
        Variables:
          STEP_HANDLER: "check-job"
          ENVIRONMENT_NAME:
            Ref: EnvironmentName
          ENVIRONMENT_NUMBER:
            Ref: EnvironmentNumber

  CompleteJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: step-handler
      Timeout: 30
      Runtime: go1.x
      MemorySize: 256
      CodeUri: ./handler.zip
      Role: !Sub ${SfnFunctionRole.Arn}
      Environment:
        Variables:
          STEP_HANDLER: "complete-job"
          ENVIRONMENT_NAME:
            Ref: EnvironmentName
          ENVIRONMENT_NUMBER:
            Ref: EnvironmentNumber

  StateMachineCodebuildJobMonitor:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: !Sub "CodebuildJobMonitor-${EnvironmentName}-${EnvironmentNumber}"
      DefinitionString: 
        Fn::Sub:
          - |
            {
              "Comment": "A state machine that submits a codebuild Job and monitors the Job until it completes.",
              "StartAt": "Submit Job",
              "States": {
                "Submit Job": {
                  "Type": "Task",
                  "Resource": "${SfnSubmitLambdaARN}",
                  "Next": "Wait X Seconds",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ],
                  "Catch": [ 
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "Next": "Get Final Job Status",
                      "ResultPath": "$.build_status"
                    }
                  ]
                },
                "Wait X Seconds": {
                  "Type": "Wait",
                  "SecondsPath": "$.wait_time",
                  "Next": "Get Job Status"
                },
                "Get Job Status": {
                  "Type": "Task",
                  "Resource": "${SfnCheckLambdaARN}",
                  "Next": "Job Complete?",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ],
                  "Catch": [ 
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "Next": "Get Final Job Status",
                      "ResultPath": "$.build_status"
                    }
                  ]
                },
                "Job Complete?": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.build_status",
                      "StringEquals": "STOPPED",
                      "Next": "Get Final Job Status"
                    },
                    {
                      "Variable": "$.build_status",
                      "StringEquals": "FAILED",
                      "Next": "Get Final Job Status"
                    },
                    {
                      "Variable": "$.build_status",
                      "StringEquals": "SUCCEEDED",
                      "Next": "Get Final Job Status"
                    }
                  ],
                  "Default": "Wait X Seconds"
                },
                "Get Final Job Status": {
                  "Type": "Task",
                  "Resource": "${SfnCompleteLambdaARN}",
                  "End": true,
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ]
                }
              }
            }
          - SfnSubmitLambdaARN: !GetAtt SubmitJobFunction.Arn
            SfnCheckLambdaARN: !GetAtt CheckJobFunction.Arn
            SfnCompleteLambdaARN: !GetAtt CompleteJobFunction.Arn
      RoleArn: !GetAtt 'RoleCodebuildJobMonitor.Arn'

  RoleCodebuildJobMonitor:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: !Sub 'states.${AWS::Region}.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 'lambda:InvokeFunction'
            Resource:
            - !GetAtt SubmitJobFunction.Arn
            - !GetAtt CheckJobFunction.Arn
            - !GetAtt CompleteJobFunction.Arn

  AgentFunctionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "AgentFunctionErrors"
      AlarmDescription: "Alarm if lambda errors out too many times"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref AgentFunction
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 0
      EvaluationPeriods: 5
      Period: 60
      TreatMissingData: "breaching"

  SubmitJobFunctionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "SubmitJobFunctionErrors"
      AlarmDescription: "Alarm if lambda errors out too many times"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref SubmitJobFunction
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 0
      EvaluationPeriods: 5
      Period: 60
      TreatMissingData: "notBreaching"

  CheckJobFunctionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "CheckJobFunctionErrors"
      AlarmDescription: "Alarm if lambda errors out too many times"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref CheckJobFunction
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 0
      EvaluationPeriods: 5
      Period: 60
      TreatMissingData: "notBreaching"

  CompleteJobFunctionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "CompleteJobFunctionErrors"
      AlarmDescription: "Alarm if lambda errors out too many times"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref CompleteJobFunction
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 0
      EvaluationPeriods: 5
      Period: 60
      TreatMissingData: "notBreaching"

Outputs:
  AgentFunctionArn:
    Value: !GetAtt AgentFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AgentFunctionArn"
  SubmitJobFunctionArn:
    Value: !GetAtt SubmitJobFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SubmitJobFunctionArn"
  CheckJobFunctionArn:
    Value: !GetAtt CheckJobFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CheckJobFunctionArn"
  CompleteJobFunctionArn:
    Value: !GetAtt CompleteJobFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CompleteJobFunctionArn"
  StateMachineCodebuildJobMonitorArn:
    Value: !Ref StateMachineCodebuildJobMonitor
    Export:
      Name: !Sub "${AWS::StackName}-StateMachineCodebuildJobMonitorArn"
  SourceBucket:
    Value: !Ref SourceBucket
    Export:
      Name: !Sub "${AWS::StackName}-SourceBucket"
  ArtifactBucket:
    Value: !Ref ArtifactBucket
    Export:
      Name: !Sub "${AWS::StackName}-ArtifactBucket"
  BuildkiteProject:
    Value: !Ref BuildkiteProject
    Export:
      Name: !Sub "${AWS::StackName}-BuildkiteProject"
  AgentFunctionAlarm:
    Value: !Ref AgentFunctionAlarm
    Export:
      Name: !Sub "${AWS::StackName}-AgentFunctionAlarm"
  SubmitJobFunctionAlarm:
    Value: !Ref SubmitJobFunctionAlarm
    Export:
      Name: !Sub "${AWS::StackName}-SubmitJobFunctionAlarm"
  CheckJobFunctionAlarm:
    Value: !Ref CheckJobFunctionAlarm
    Export:
      Name: !Sub "${AWS::StackName}-CheckJobFunctionAlarm"
  CompleteJobFunctionAlarm:
    Value: !Ref CompleteJobFunctionAlarm
    Export:
      Name: !Sub "${AWS::StackName}-CompleteJobFunctionAlarm"

// Code generated by mockery v1.0.0
package mocks

import api "github.com/buildkite/agent/api"

import mock "github.com/stretchr/testify/mock"

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// AcceptJob provides a mock function with given fields: _a0, _a1
func (_m *API) AcceptJob(_a0 string, _a1 *api.Job) (*api.Job, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.Job
	if rf, ok := ret.Get(0).(func(string, *api.Job) *api.Job); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *api.Job) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Beat provides a mock function with given fields: _a0
func (_m *API) Beat(_a0 string) (*api.Heartbeat, error) {
	ret := _m.Called(_a0)

	var r0 *api.Heartbeat
	if rf, ok := ret.Get(0).(func(string) *api.Heartbeat); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Heartbeat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: _a0
func (_m *API) Ping(_a0 string) (*api.Ping, error) {
	ret := _m.Called(_a0)

	var r0 *api.Ping
	if rf, ok := ret.Get(0).(func(string) *api.Ping); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Ping)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *API) Register(_a0 string, _a1 string) (*api.Agent, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.Agent
	if rf, ok := ret.Get(0).(func(string, string) *api.Agent); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Agent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

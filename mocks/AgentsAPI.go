// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import dynalock "github.com/wolfeidau/dynalock"
import mock "github.com/stretchr/testify/mock"
import store "github.com/wolfeidau/buildkite-serverless-agent/pkg/store"
import time "time"

// AgentsAPI is an autogenerated mock type for the AgentsAPI type
type AgentsAPI struct {
	mock.Mock
}

// CreateOrUpdate provides a mock function with given fields: agent
func (_m *AgentsAPI) CreateOrUpdate(agent *store.AgentRecord) (*store.AgentRecord, error) {
	ret := _m.Called(agent)

	var r0 *store.AgentRecord
	if rf, ok := ret.Get(0).(func(*store.AgentRecord) *store.AgentRecord); ok {
		r0 = rf(agent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.AgentRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*store.AgentRecord) error); ok {
		r1 = rf(agent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: name
func (_m *AgentsAPI) Get(name string) (*store.AgentRecord, error) {
	ret := _m.Called(name)

	var r0 *store.AgentRecord
	if rf, ok := ret.Get(0).(func(string) *store.AgentRecord); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.AgentRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *AgentsAPI) List() ([]*store.AgentRecord, error) {
	ret := _m.Called()

	var r0 []*store.AgentRecord
	if rf, ok := ret.Get(0).(func() []*store.AgentRecord); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*store.AgentRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLock provides a mock function with given fields: name, ttl
func (_m *AgentsAPI) NewLock(name string, ttl time.Duration) (dynalock.Locker, error) {
	ret := _m.Called(name, ttl)

	var r0 dynalock.Locker
	if rf, ok := ret.Get(0).(func(string, time.Duration) dynalock.Locker); ok {
		r0 = rf(name, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynalock.Locker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Duration) error); ok {
		r1 = rf(name, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

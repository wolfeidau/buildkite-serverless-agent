// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"
import sfn "github.com/aws/aws-sdk-go/service/sfn"

// SFNAPI is an autogenerated mock type for the SFNAPI type
type SFNAPI struct {
	mock.Mock
}

// CreateActivity provides a mock function with given fields: _a0
func (_m *SFNAPI) CreateActivity(_a0 *sfn.CreateActivityInput) (*sfn.CreateActivityOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.CreateActivityOutput
	if rf, ok := ret.Get(0).(func(*sfn.CreateActivityInput) *sfn.CreateActivityOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.CreateActivityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.CreateActivityInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateActivityRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) CreateActivityRequest(_a0 *sfn.CreateActivityInput) (*request.Request, *sfn.CreateActivityOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.CreateActivityInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.CreateActivityOutput
	if rf, ok := ret.Get(1).(func(*sfn.CreateActivityInput) *sfn.CreateActivityOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.CreateActivityOutput)
		}
	}

	return r0, r1
}

// CreateActivityWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) CreateActivityWithContext(_a0 context.Context, _a1 *sfn.CreateActivityInput, _a2 ...request.Option) (*sfn.CreateActivityOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.CreateActivityOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.CreateActivityInput, ...request.Option) *sfn.CreateActivityOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.CreateActivityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.CreateActivityInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStateMachine provides a mock function with given fields: _a0
func (_m *SFNAPI) CreateStateMachine(_a0 *sfn.CreateStateMachineInput) (*sfn.CreateStateMachineOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.CreateStateMachineOutput
	if rf, ok := ret.Get(0).(func(*sfn.CreateStateMachineInput) *sfn.CreateStateMachineOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.CreateStateMachineOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.CreateStateMachineInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStateMachineRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) CreateStateMachineRequest(_a0 *sfn.CreateStateMachineInput) (*request.Request, *sfn.CreateStateMachineOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.CreateStateMachineInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.CreateStateMachineOutput
	if rf, ok := ret.Get(1).(func(*sfn.CreateStateMachineInput) *sfn.CreateStateMachineOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.CreateStateMachineOutput)
		}
	}

	return r0, r1
}

// CreateStateMachineWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) CreateStateMachineWithContext(_a0 context.Context, _a1 *sfn.CreateStateMachineInput, _a2 ...request.Option) (*sfn.CreateStateMachineOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.CreateStateMachineOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.CreateStateMachineInput, ...request.Option) *sfn.CreateStateMachineOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.CreateStateMachineOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.CreateStateMachineInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteActivity provides a mock function with given fields: _a0
func (_m *SFNAPI) DeleteActivity(_a0 *sfn.DeleteActivityInput) (*sfn.DeleteActivityOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.DeleteActivityOutput
	if rf, ok := ret.Get(0).(func(*sfn.DeleteActivityInput) *sfn.DeleteActivityOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.DeleteActivityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.DeleteActivityInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteActivityRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) DeleteActivityRequest(_a0 *sfn.DeleteActivityInput) (*request.Request, *sfn.DeleteActivityOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.DeleteActivityInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.DeleteActivityOutput
	if rf, ok := ret.Get(1).(func(*sfn.DeleteActivityInput) *sfn.DeleteActivityOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.DeleteActivityOutput)
		}
	}

	return r0, r1
}

// DeleteActivityWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) DeleteActivityWithContext(_a0 context.Context, _a1 *sfn.DeleteActivityInput, _a2 ...request.Option) (*sfn.DeleteActivityOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.DeleteActivityOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.DeleteActivityInput, ...request.Option) *sfn.DeleteActivityOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.DeleteActivityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.DeleteActivityInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStateMachine provides a mock function with given fields: _a0
func (_m *SFNAPI) DeleteStateMachine(_a0 *sfn.DeleteStateMachineInput) (*sfn.DeleteStateMachineOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.DeleteStateMachineOutput
	if rf, ok := ret.Get(0).(func(*sfn.DeleteStateMachineInput) *sfn.DeleteStateMachineOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.DeleteStateMachineOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.DeleteStateMachineInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStateMachineRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) DeleteStateMachineRequest(_a0 *sfn.DeleteStateMachineInput) (*request.Request, *sfn.DeleteStateMachineOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.DeleteStateMachineInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.DeleteStateMachineOutput
	if rf, ok := ret.Get(1).(func(*sfn.DeleteStateMachineInput) *sfn.DeleteStateMachineOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.DeleteStateMachineOutput)
		}
	}

	return r0, r1
}

// DeleteStateMachineWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) DeleteStateMachineWithContext(_a0 context.Context, _a1 *sfn.DeleteStateMachineInput, _a2 ...request.Option) (*sfn.DeleteStateMachineOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.DeleteStateMachineOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.DeleteStateMachineInput, ...request.Option) *sfn.DeleteStateMachineOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.DeleteStateMachineOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.DeleteStateMachineInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeActivity provides a mock function with given fields: _a0
func (_m *SFNAPI) DescribeActivity(_a0 *sfn.DescribeActivityInput) (*sfn.DescribeActivityOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.DescribeActivityOutput
	if rf, ok := ret.Get(0).(func(*sfn.DescribeActivityInput) *sfn.DescribeActivityOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.DescribeActivityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.DescribeActivityInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeActivityRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) DescribeActivityRequest(_a0 *sfn.DescribeActivityInput) (*request.Request, *sfn.DescribeActivityOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.DescribeActivityInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.DescribeActivityOutput
	if rf, ok := ret.Get(1).(func(*sfn.DescribeActivityInput) *sfn.DescribeActivityOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.DescribeActivityOutput)
		}
	}

	return r0, r1
}

// DescribeActivityWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) DescribeActivityWithContext(_a0 context.Context, _a1 *sfn.DescribeActivityInput, _a2 ...request.Option) (*sfn.DescribeActivityOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.DescribeActivityOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.DescribeActivityInput, ...request.Option) *sfn.DescribeActivityOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.DescribeActivityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.DescribeActivityInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExecution provides a mock function with given fields: _a0
func (_m *SFNAPI) DescribeExecution(_a0 *sfn.DescribeExecutionInput) (*sfn.DescribeExecutionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.DescribeExecutionOutput
	if rf, ok := ret.Get(0).(func(*sfn.DescribeExecutionInput) *sfn.DescribeExecutionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.DescribeExecutionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.DescribeExecutionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExecutionRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) DescribeExecutionRequest(_a0 *sfn.DescribeExecutionInput) (*request.Request, *sfn.DescribeExecutionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.DescribeExecutionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.DescribeExecutionOutput
	if rf, ok := ret.Get(1).(func(*sfn.DescribeExecutionInput) *sfn.DescribeExecutionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.DescribeExecutionOutput)
		}
	}

	return r0, r1
}

// DescribeExecutionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) DescribeExecutionWithContext(_a0 context.Context, _a1 *sfn.DescribeExecutionInput, _a2 ...request.Option) (*sfn.DescribeExecutionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.DescribeExecutionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.DescribeExecutionInput, ...request.Option) *sfn.DescribeExecutionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.DescribeExecutionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.DescribeExecutionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStateMachine provides a mock function with given fields: _a0
func (_m *SFNAPI) DescribeStateMachine(_a0 *sfn.DescribeStateMachineInput) (*sfn.DescribeStateMachineOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.DescribeStateMachineOutput
	if rf, ok := ret.Get(0).(func(*sfn.DescribeStateMachineInput) *sfn.DescribeStateMachineOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.DescribeStateMachineOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.DescribeStateMachineInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStateMachineForExecution provides a mock function with given fields: _a0
func (_m *SFNAPI) DescribeStateMachineForExecution(_a0 *sfn.DescribeStateMachineForExecutionInput) (*sfn.DescribeStateMachineForExecutionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.DescribeStateMachineForExecutionOutput
	if rf, ok := ret.Get(0).(func(*sfn.DescribeStateMachineForExecutionInput) *sfn.DescribeStateMachineForExecutionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.DescribeStateMachineForExecutionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.DescribeStateMachineForExecutionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStateMachineForExecutionRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) DescribeStateMachineForExecutionRequest(_a0 *sfn.DescribeStateMachineForExecutionInput) (*request.Request, *sfn.DescribeStateMachineForExecutionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.DescribeStateMachineForExecutionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.DescribeStateMachineForExecutionOutput
	if rf, ok := ret.Get(1).(func(*sfn.DescribeStateMachineForExecutionInput) *sfn.DescribeStateMachineForExecutionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.DescribeStateMachineForExecutionOutput)
		}
	}

	return r0, r1
}

// DescribeStateMachineForExecutionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) DescribeStateMachineForExecutionWithContext(_a0 context.Context, _a1 *sfn.DescribeStateMachineForExecutionInput, _a2 ...request.Option) (*sfn.DescribeStateMachineForExecutionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.DescribeStateMachineForExecutionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.DescribeStateMachineForExecutionInput, ...request.Option) *sfn.DescribeStateMachineForExecutionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.DescribeStateMachineForExecutionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.DescribeStateMachineForExecutionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStateMachineRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) DescribeStateMachineRequest(_a0 *sfn.DescribeStateMachineInput) (*request.Request, *sfn.DescribeStateMachineOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.DescribeStateMachineInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.DescribeStateMachineOutput
	if rf, ok := ret.Get(1).(func(*sfn.DescribeStateMachineInput) *sfn.DescribeStateMachineOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.DescribeStateMachineOutput)
		}
	}

	return r0, r1
}

// DescribeStateMachineWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) DescribeStateMachineWithContext(_a0 context.Context, _a1 *sfn.DescribeStateMachineInput, _a2 ...request.Option) (*sfn.DescribeStateMachineOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.DescribeStateMachineOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.DescribeStateMachineInput, ...request.Option) *sfn.DescribeStateMachineOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.DescribeStateMachineOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.DescribeStateMachineInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActivityTask provides a mock function with given fields: _a0
func (_m *SFNAPI) GetActivityTask(_a0 *sfn.GetActivityTaskInput) (*sfn.GetActivityTaskOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.GetActivityTaskOutput
	if rf, ok := ret.Get(0).(func(*sfn.GetActivityTaskInput) *sfn.GetActivityTaskOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.GetActivityTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.GetActivityTaskInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActivityTaskRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) GetActivityTaskRequest(_a0 *sfn.GetActivityTaskInput) (*request.Request, *sfn.GetActivityTaskOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.GetActivityTaskInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.GetActivityTaskOutput
	if rf, ok := ret.Get(1).(func(*sfn.GetActivityTaskInput) *sfn.GetActivityTaskOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.GetActivityTaskOutput)
		}
	}

	return r0, r1
}

// GetActivityTaskWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) GetActivityTaskWithContext(_a0 context.Context, _a1 *sfn.GetActivityTaskInput, _a2 ...request.Option) (*sfn.GetActivityTaskOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.GetActivityTaskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.GetActivityTaskInput, ...request.Option) *sfn.GetActivityTaskOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.GetActivityTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.GetActivityTaskInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutionHistory provides a mock function with given fields: _a0
func (_m *SFNAPI) GetExecutionHistory(_a0 *sfn.GetExecutionHistoryInput) (*sfn.GetExecutionHistoryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.GetExecutionHistoryOutput
	if rf, ok := ret.Get(0).(func(*sfn.GetExecutionHistoryInput) *sfn.GetExecutionHistoryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.GetExecutionHistoryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.GetExecutionHistoryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutionHistoryPages provides a mock function with given fields: _a0, _a1
func (_m *SFNAPI) GetExecutionHistoryPages(_a0 *sfn.GetExecutionHistoryInput, _a1 func(*sfn.GetExecutionHistoryOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sfn.GetExecutionHistoryInput, func(*sfn.GetExecutionHistoryOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetExecutionHistoryPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SFNAPI) GetExecutionHistoryPagesWithContext(_a0 context.Context, _a1 *sfn.GetExecutionHistoryInput, _a2 func(*sfn.GetExecutionHistoryOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.GetExecutionHistoryInput, func(*sfn.GetExecutionHistoryOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetExecutionHistoryRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) GetExecutionHistoryRequest(_a0 *sfn.GetExecutionHistoryInput) (*request.Request, *sfn.GetExecutionHistoryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.GetExecutionHistoryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.GetExecutionHistoryOutput
	if rf, ok := ret.Get(1).(func(*sfn.GetExecutionHistoryInput) *sfn.GetExecutionHistoryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.GetExecutionHistoryOutput)
		}
	}

	return r0, r1
}

// GetExecutionHistoryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) GetExecutionHistoryWithContext(_a0 context.Context, _a1 *sfn.GetExecutionHistoryInput, _a2 ...request.Option) (*sfn.GetExecutionHistoryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.GetExecutionHistoryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.GetExecutionHistoryInput, ...request.Option) *sfn.GetExecutionHistoryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.GetExecutionHistoryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.GetExecutionHistoryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListActivities provides a mock function with given fields: _a0
func (_m *SFNAPI) ListActivities(_a0 *sfn.ListActivitiesInput) (*sfn.ListActivitiesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.ListActivitiesOutput
	if rf, ok := ret.Get(0).(func(*sfn.ListActivitiesInput) *sfn.ListActivitiesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.ListActivitiesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.ListActivitiesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListActivitiesPages provides a mock function with given fields: _a0, _a1
func (_m *SFNAPI) ListActivitiesPages(_a0 *sfn.ListActivitiesInput, _a1 func(*sfn.ListActivitiesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sfn.ListActivitiesInput, func(*sfn.ListActivitiesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListActivitiesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SFNAPI) ListActivitiesPagesWithContext(_a0 context.Context, _a1 *sfn.ListActivitiesInput, _a2 func(*sfn.ListActivitiesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.ListActivitiesInput, func(*sfn.ListActivitiesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListActivitiesRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) ListActivitiesRequest(_a0 *sfn.ListActivitiesInput) (*request.Request, *sfn.ListActivitiesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.ListActivitiesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.ListActivitiesOutput
	if rf, ok := ret.Get(1).(func(*sfn.ListActivitiesInput) *sfn.ListActivitiesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.ListActivitiesOutput)
		}
	}

	return r0, r1
}

// ListActivitiesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) ListActivitiesWithContext(_a0 context.Context, _a1 *sfn.ListActivitiesInput, _a2 ...request.Option) (*sfn.ListActivitiesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.ListActivitiesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.ListActivitiesInput, ...request.Option) *sfn.ListActivitiesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.ListActivitiesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.ListActivitiesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExecutions provides a mock function with given fields: _a0
func (_m *SFNAPI) ListExecutions(_a0 *sfn.ListExecutionsInput) (*sfn.ListExecutionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.ListExecutionsOutput
	if rf, ok := ret.Get(0).(func(*sfn.ListExecutionsInput) *sfn.ListExecutionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.ListExecutionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.ListExecutionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExecutionsPages provides a mock function with given fields: _a0, _a1
func (_m *SFNAPI) ListExecutionsPages(_a0 *sfn.ListExecutionsInput, _a1 func(*sfn.ListExecutionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sfn.ListExecutionsInput, func(*sfn.ListExecutionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListExecutionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SFNAPI) ListExecutionsPagesWithContext(_a0 context.Context, _a1 *sfn.ListExecutionsInput, _a2 func(*sfn.ListExecutionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.ListExecutionsInput, func(*sfn.ListExecutionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListExecutionsRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) ListExecutionsRequest(_a0 *sfn.ListExecutionsInput) (*request.Request, *sfn.ListExecutionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.ListExecutionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.ListExecutionsOutput
	if rf, ok := ret.Get(1).(func(*sfn.ListExecutionsInput) *sfn.ListExecutionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.ListExecutionsOutput)
		}
	}

	return r0, r1
}

// ListExecutionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) ListExecutionsWithContext(_a0 context.Context, _a1 *sfn.ListExecutionsInput, _a2 ...request.Option) (*sfn.ListExecutionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.ListExecutionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.ListExecutionsInput, ...request.Option) *sfn.ListExecutionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.ListExecutionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.ListExecutionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStateMachines provides a mock function with given fields: _a0
func (_m *SFNAPI) ListStateMachines(_a0 *sfn.ListStateMachinesInput) (*sfn.ListStateMachinesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.ListStateMachinesOutput
	if rf, ok := ret.Get(0).(func(*sfn.ListStateMachinesInput) *sfn.ListStateMachinesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.ListStateMachinesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.ListStateMachinesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStateMachinesPages provides a mock function with given fields: _a0, _a1
func (_m *SFNAPI) ListStateMachinesPages(_a0 *sfn.ListStateMachinesInput, _a1 func(*sfn.ListStateMachinesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sfn.ListStateMachinesInput, func(*sfn.ListStateMachinesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListStateMachinesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SFNAPI) ListStateMachinesPagesWithContext(_a0 context.Context, _a1 *sfn.ListStateMachinesInput, _a2 func(*sfn.ListStateMachinesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.ListStateMachinesInput, func(*sfn.ListStateMachinesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListStateMachinesRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) ListStateMachinesRequest(_a0 *sfn.ListStateMachinesInput) (*request.Request, *sfn.ListStateMachinesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.ListStateMachinesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.ListStateMachinesOutput
	if rf, ok := ret.Get(1).(func(*sfn.ListStateMachinesInput) *sfn.ListStateMachinesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.ListStateMachinesOutput)
		}
	}

	return r0, r1
}

// ListStateMachinesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) ListStateMachinesWithContext(_a0 context.Context, _a1 *sfn.ListStateMachinesInput, _a2 ...request.Option) (*sfn.ListStateMachinesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.ListStateMachinesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.ListStateMachinesInput, ...request.Option) *sfn.ListStateMachinesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.ListStateMachinesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.ListStateMachinesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *SFNAPI) ListTagsForResource(_a0 *sfn.ListTagsForResourceInput) (*sfn.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*sfn.ListTagsForResourceInput) *sfn.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) ListTagsForResourceRequest(_a0 *sfn.ListTagsForResourceInput) (*request.Request, *sfn.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.ListTagsForResourceOutput
	if rf, ok := ret.Get(1).(func(*sfn.ListTagsForResourceInput) *sfn.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) ListTagsForResourceWithContext(_a0 context.Context, _a1 *sfn.ListTagsForResourceInput, _a2 ...request.Option) (*sfn.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.ListTagsForResourceInput, ...request.Option) *sfn.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTaskFailure provides a mock function with given fields: _a0
func (_m *SFNAPI) SendTaskFailure(_a0 *sfn.SendTaskFailureInput) (*sfn.SendTaskFailureOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.SendTaskFailureOutput
	if rf, ok := ret.Get(0).(func(*sfn.SendTaskFailureInput) *sfn.SendTaskFailureOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.SendTaskFailureOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.SendTaskFailureInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTaskFailureRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) SendTaskFailureRequest(_a0 *sfn.SendTaskFailureInput) (*request.Request, *sfn.SendTaskFailureOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.SendTaskFailureInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.SendTaskFailureOutput
	if rf, ok := ret.Get(1).(func(*sfn.SendTaskFailureInput) *sfn.SendTaskFailureOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.SendTaskFailureOutput)
		}
	}

	return r0, r1
}

// SendTaskFailureWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) SendTaskFailureWithContext(_a0 context.Context, _a1 *sfn.SendTaskFailureInput, _a2 ...request.Option) (*sfn.SendTaskFailureOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.SendTaskFailureOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.SendTaskFailureInput, ...request.Option) *sfn.SendTaskFailureOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.SendTaskFailureOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.SendTaskFailureInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTaskHeartbeat provides a mock function with given fields: _a0
func (_m *SFNAPI) SendTaskHeartbeat(_a0 *sfn.SendTaskHeartbeatInput) (*sfn.SendTaskHeartbeatOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.SendTaskHeartbeatOutput
	if rf, ok := ret.Get(0).(func(*sfn.SendTaskHeartbeatInput) *sfn.SendTaskHeartbeatOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.SendTaskHeartbeatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.SendTaskHeartbeatInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTaskHeartbeatRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) SendTaskHeartbeatRequest(_a0 *sfn.SendTaskHeartbeatInput) (*request.Request, *sfn.SendTaskHeartbeatOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.SendTaskHeartbeatInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.SendTaskHeartbeatOutput
	if rf, ok := ret.Get(1).(func(*sfn.SendTaskHeartbeatInput) *sfn.SendTaskHeartbeatOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.SendTaskHeartbeatOutput)
		}
	}

	return r0, r1
}

// SendTaskHeartbeatWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) SendTaskHeartbeatWithContext(_a0 context.Context, _a1 *sfn.SendTaskHeartbeatInput, _a2 ...request.Option) (*sfn.SendTaskHeartbeatOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.SendTaskHeartbeatOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.SendTaskHeartbeatInput, ...request.Option) *sfn.SendTaskHeartbeatOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.SendTaskHeartbeatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.SendTaskHeartbeatInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTaskSuccess provides a mock function with given fields: _a0
func (_m *SFNAPI) SendTaskSuccess(_a0 *sfn.SendTaskSuccessInput) (*sfn.SendTaskSuccessOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.SendTaskSuccessOutput
	if rf, ok := ret.Get(0).(func(*sfn.SendTaskSuccessInput) *sfn.SendTaskSuccessOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.SendTaskSuccessOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.SendTaskSuccessInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTaskSuccessRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) SendTaskSuccessRequest(_a0 *sfn.SendTaskSuccessInput) (*request.Request, *sfn.SendTaskSuccessOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.SendTaskSuccessInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.SendTaskSuccessOutput
	if rf, ok := ret.Get(1).(func(*sfn.SendTaskSuccessInput) *sfn.SendTaskSuccessOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.SendTaskSuccessOutput)
		}
	}

	return r0, r1
}

// SendTaskSuccessWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) SendTaskSuccessWithContext(_a0 context.Context, _a1 *sfn.SendTaskSuccessInput, _a2 ...request.Option) (*sfn.SendTaskSuccessOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.SendTaskSuccessOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.SendTaskSuccessInput, ...request.Option) *sfn.SendTaskSuccessOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.SendTaskSuccessOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.SendTaskSuccessInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartExecution provides a mock function with given fields: _a0
func (_m *SFNAPI) StartExecution(_a0 *sfn.StartExecutionInput) (*sfn.StartExecutionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.StartExecutionOutput
	if rf, ok := ret.Get(0).(func(*sfn.StartExecutionInput) *sfn.StartExecutionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.StartExecutionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.StartExecutionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartExecutionRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) StartExecutionRequest(_a0 *sfn.StartExecutionInput) (*request.Request, *sfn.StartExecutionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.StartExecutionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.StartExecutionOutput
	if rf, ok := ret.Get(1).(func(*sfn.StartExecutionInput) *sfn.StartExecutionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.StartExecutionOutput)
		}
	}

	return r0, r1
}

// StartExecutionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) StartExecutionWithContext(_a0 context.Context, _a1 *sfn.StartExecutionInput, _a2 ...request.Option) (*sfn.StartExecutionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.StartExecutionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.StartExecutionInput, ...request.Option) *sfn.StartExecutionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.StartExecutionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.StartExecutionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopExecution provides a mock function with given fields: _a0
func (_m *SFNAPI) StopExecution(_a0 *sfn.StopExecutionInput) (*sfn.StopExecutionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.StopExecutionOutput
	if rf, ok := ret.Get(0).(func(*sfn.StopExecutionInput) *sfn.StopExecutionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.StopExecutionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.StopExecutionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopExecutionRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) StopExecutionRequest(_a0 *sfn.StopExecutionInput) (*request.Request, *sfn.StopExecutionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.StopExecutionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.StopExecutionOutput
	if rf, ok := ret.Get(1).(func(*sfn.StopExecutionInput) *sfn.StopExecutionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.StopExecutionOutput)
		}
	}

	return r0, r1
}

// StopExecutionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) StopExecutionWithContext(_a0 context.Context, _a1 *sfn.StopExecutionInput, _a2 ...request.Option) (*sfn.StopExecutionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.StopExecutionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.StopExecutionInput, ...request.Option) *sfn.StopExecutionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.StopExecutionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.StopExecutionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *SFNAPI) TagResource(_a0 *sfn.TagResourceInput) (*sfn.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*sfn.TagResourceInput) *sfn.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) TagResourceRequest(_a0 *sfn.TagResourceInput) (*request.Request, *sfn.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*sfn.TagResourceInput) *sfn.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) TagResourceWithContext(_a0 context.Context, _a1 *sfn.TagResourceInput, _a2 ...request.Option) (*sfn.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.TagResourceInput, ...request.Option) *sfn.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *SFNAPI) UntagResource(_a0 *sfn.UntagResourceInput) (*sfn.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*sfn.UntagResourceInput) *sfn.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) UntagResourceRequest(_a0 *sfn.UntagResourceInput) (*request.Request, *sfn.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*sfn.UntagResourceInput) *sfn.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) UntagResourceWithContext(_a0 context.Context, _a1 *sfn.UntagResourceInput, _a2 ...request.Option) (*sfn.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.UntagResourceInput, ...request.Option) *sfn.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStateMachine provides a mock function with given fields: _a0
func (_m *SFNAPI) UpdateStateMachine(_a0 *sfn.UpdateStateMachineInput) (*sfn.UpdateStateMachineOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sfn.UpdateStateMachineOutput
	if rf, ok := ret.Get(0).(func(*sfn.UpdateStateMachineInput) *sfn.UpdateStateMachineOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.UpdateStateMachineOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sfn.UpdateStateMachineInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStateMachineRequest provides a mock function with given fields: _a0
func (_m *SFNAPI) UpdateStateMachineRequest(_a0 *sfn.UpdateStateMachineInput) (*request.Request, *sfn.UpdateStateMachineOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sfn.UpdateStateMachineInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sfn.UpdateStateMachineOutput
	if rf, ok := ret.Get(1).(func(*sfn.UpdateStateMachineInput) *sfn.UpdateStateMachineOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sfn.UpdateStateMachineOutput)
		}
	}

	return r0, r1
}

// UpdateStateMachineWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SFNAPI) UpdateStateMachineWithContext(_a0 context.Context, _a1 *sfn.UpdateStateMachineInput, _a2 ...request.Option) (*sfn.UpdateStateMachineOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sfn.UpdateStateMachineOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sfn.UpdateStateMachineInput, ...request.Option) *sfn.UpdateStateMachineOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sfn.UpdateStateMachineOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sfn.UpdateStateMachineInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
